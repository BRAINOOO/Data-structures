struct trie
{
    map< char,trie > child;
    int isleaf;
    
    trie()
    {
        child=map<char,trie*> ();
        isleaf=0;
    }
    
    
    void insertt(trie cur,string word,int id)
    {
        if(id==sz(word))
        {
            cur.isleaf++;
            return ;
        }
    
       char ch=word[id];
       trie node;
      if(cur.child.find(ch)==cur.child.end())
       {
            node=new trie();
           cur.child[ch]= node;
       }
    else
    {
          node=cur.child[ch];
    }
    
    insertt(node,word,id+1);
    }
    
    bool searchh(trie cur,string word,int id)
    {
        
        if(id==sz(word))
            return  cur.isleaf!=0 ;
        
        char ch=word[id];
         trie node;
      if(cur.child.find(ch)==cur.child.end())
       {
           return 0;
       }
          node=cur.child[ch];
          
        return  searchh(node,word,id+1);
    }
    
    bool del(trie cur,string word,int id)
    {
        if(id==sz(word))
        {
            if(cur.isleaf==0)
                return 0;
            
            cur.isleaf--;
            
            
            return sz(cur.child)==0;
            
            
        }
        
        
        char ch=word[id];
        
           trie node;
      if(cur.child.find(ch)==cur.child.end())
       {
           return 0;
       }
          node=cur.child[ch];
          
        bool ret=  del(node,word,id+1);
        
        if(ret)
        {
            child.erase(cur.child.find(ch));
            return sz(cur.child)==0;
        }
        return 0;
        
        
    }
};
    
    
    
    
